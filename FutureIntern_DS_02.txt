# Check for class distribution
print(data['sentiment'].value_counts())

# Dynamically assign target names based on available classes in the dataset
unique_classes = data['sentiment'].unique()

# Create a mapping for class names based on the present classes
class_mapping = {-1: 'Negative', 0: 'Neutral', 1: 'Positive'}
target_names = [class_mapping[cls] for cls in unique_classes]

# Confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)

# Classification report
class_report = classification_report(y_test, y_pred, target_names=target_names, zero_division=0)

# Output the results
print("---- Evaluation Metrics ----")
print(f"Accuracy: {accuracy:.4f}")
print(f"Precision: {precision:.4f}")
print(f"Recall: {recall:.4f}")
print(f"F1 Score: {f1:.4f}")

# Confusion matrix
print("\nConfusion Matrix:")
print(conf_matrix)

# Classification report
print("\nClassification Report:")
print(class_report)
